The Wire Cell Toolkit (WCT) should be easy to build on any POSIX'y system with a recent C++ compiler.  This section describes how to build releases and development branches, it gives guidance for supplying the few software dependencies, and documents how releases are made.

** Toolkit installation 
   :PROPERTIES:
   :CUSTOM_ID:       toolkit-installation
   :END:


#+begin_warning
This assumes you already have available the required dependencies.  See section [[Guide for installation of dependencies]].
#+end_warning

Installation requires four steps:
1) get the source
2) configure the source
3) build the code
4) install the results

*** Source code
    :PROPERTIES:
    :CUSTOM_ID: source-code
    :END:

WCT source is composed of several packages (see section [[Packages]]) and all source is available from the [[https://github.com/WireCell/][Wire Cell GitHub organization]].  Releases of each package are made and documented on GitHub (/eg/ [[https://github.com/WireCell/wire-cell-toolkit/releases][here]]) and can be downloaded as archives.  However, using git to assemble a working source area is recommended and easier.  Releases and development branches are handled slightly differently.

To obtain a release requires no GitHub authentication:
#+BEGIN_EXAMPLE
  $ git clone --branch 0.5.x \
        https://github.com/WireCell/wire-cell-toolkit.git
#+END_EXAMPLE
This gets the tip of a release branch (the =0.5.x= series in this example).  
A specific point release can then be checked out:
#+BEGIN_EXAMPLE
  $ git checkout -b 0.5.0 0.5.0
#+END_EXAMPLE

To contribute new development to the toolkit, even as a "core"
developer, it's recommended to /fork/ the ~wire-cell-toolkit~ repository
on GitHub, do your work there and make GitHub Pull Requests (PR).
This gives an opportunity for other developers to give a quick check
on new code.  

Core developers can nonetheless directly push to the central
repository.  It's suggested to do so via an SSH authenticated clone:

#+BEGIN_EXAMPLE
  $ git clone git@github.com:WireCell/wire-cell-toolkit.git wct
#+END_EXAMPLE

*** Configuring the source
    :PROPERTIES:
    :CUSTOM_ID: configuring-the-source
    :END:

Prior to building, the source must be configured to specify an
installation location and provide options to direct how to find
external software dependencies and/or to select which optional
dependencies.  More details on the build system are in [[./waftools.org]].

On systems where software dependencies can be auto-detected, the
configuration step may be as simple as:

#+BEGIN_EXAMPLE
  $ ./wcb configure \
     --prefix=/path/to/install
#+END_EXAMPLE

This will print the results of the attempts to detect required and optional dependencies.  Missing but optional dependencies will not cause failure.  See below for guidance on installing dependencies if this step fails or if desired optional dependencies are not found.

Dependencies may be automatically located if =pkg-config= is available and possibly by suitably setting the =PKG_CONFIG_PATH= environment variable.  If automatic location fails then missing locations can be explicitly specified.  The following shows an example where all externals are installed at a single location identified by the =WCT_EXTERNALS= environment variable (not, this variable has no other special meaning other than to make this example brief).


#+BEGIN_EXAMPLE
  $ ./wcb configure \
     --prefix=/path/to/install \
     --boost-includes=$WCT_EXTERNALS/include \
     --boost-libs=$WCT_EXTERNALS/lib --boost-mt \
     --with-root=$WCT_EXTERNALS \
     --with-fftw=$WCT_EXTERNALS \
     --with-eigen=$WCT_EXTERNALS \
     --with-jsoncpp=$WCT_EXTERNALS \
     --with-jsonnet=$WCT_EXTERNALS \
     --with-tbb=$WCT_EXTERNALS
#+END_EXAMPLE

If the externals are not all in one directory then their locations must be accordingly specified individually.

*** Building the source
    :PROPERTIES:
    :CUSTOM_ID: building-the-source
    :END:

It is suggested to first build the code before running tests.

#+BEGIN_EXAMPLE
  $ ./wcb -p --notests
#+END_EXAMPLE
If there are build failures more information can be obtained by repeating the build with more verbosity:
#+BEGIN_EXAMPLE
  $ ./wcb -vv
#+END_EXAMPLE


*** Install the results
    :PROPERTIES:
    :CUSTOM_ID: install-built-code
    :END:

To install the build results into the location given by =--prefix= simply issue:
#+BEGIN_EXAMPLE
  $ ./wcb install --notests
#+END_EXAMPLE


*** Running unit tests
    :PROPERTIES:
    :CUSTOM_ID: running-unit-tests
    :END:

#+begin_note
Unit tests are meant to be small, focused tests.  More elaborate tests may be found in the [[https://github.com/wirecell/wire-cell-validate][wire-cell-validate]] package.
#+end_note

Tests are run by default by ~./wcb~ unless ~--notests~ is given.  Running
the tests can take a while but should be run on new installations and
after any significant development.  The developers should not leave
broken tests so any failure should be treated as important.  However,
some tests require proper user environment to run correctly.  In
particular, tests need to find some Wire-Cell configuration files and
the executable programs and shared libraries of the external software
dependencies need to be located.  Below shows an example:

#+BEGIN_EXAMPLE
  $ export WIRECELL_PATH=$HOME/dev/wct/wire-cell-data:$HOME/dev/wct/wire-cell-toolkit/cfg
  $ export LD_LIBRARY_PATH=$HOME/dev/wct/install/lib:$HOME/opt/jsonnet/lib
  $ ./wcb -p --alltests
  ...
  execution summary 
    tests that pass 83/83
      ... 
    tests that fail 0/83 
  'build' finished successfully (15.192s)
#+END_EXAMPLE


#+BEGIN_INFO
Developers wishing to run unit tests that exercise code they are developing should take care in setting =LD_LIBRARY_PATH=.  If the WCT installation area is included then the unit tests will run against those libraries, effectively masking the locally built versions in the development area.  Alternatively, they must run =./wcb install= and then manually re-run the unit test.
#+END_INFO

*** Other build commands
    :PROPERTIES:
    :CUSTOM_ID: other-build-commands
    :END:


These other commands may be useful:

#+BEGIN_EXAMPLE
  $ ./wcb clean          # clean build products
  $ ./wcb distclean      # also clean configuration
                         # build with debug symbols  
  $ ./wcb configure --build-debug=-ggdb3 [...]
                         # to save some time, just 
                         # rebuild the given test 
                         # and don't run any tests
  $ ./wcb --notests --target=test_xxx
  $ ./wcb --help         # see more options.
#+END_EXAMPLE


** Runtime environment
   :PROPERTIES:
   :CUSTOM_ID: runtime-environment
   :END:

Managing environment is usually a personal choice or computer facility policy and WCT does not place any significant requirements on this.  The usual setting of =PATH= like variables will likely be needed.  

Internally, WCT requires a minimum of environment variables:

- =WIRECELL_PATH= :: a list of directories to search when locating configuration files.  More information is in the section [[Configuration]].

** Guide for installation of dependencies 
   :PROPERTIES:
   :CUSTOM_ID: installing-dependencies
   :END:

The WCT depends on a number of third-party "external" software packages which are not expected to be provided by a typical unix-like system:

- Boost :: various functions
- Eigen3 :: matrix representation, interface to FFTW
- FFTW3 :: for fast Fast Fourier Transforms
- JsonCPP :: basis for configuration and input data files 
- Jsonnet :: structured configuration files.

Additional, optional package are needed for additional functionality:

- ROOT :: for the ~root/~ sub-package, not required for core code
- TBB :: for parallel, multi-threaded data flow programming paradigm support
- CUDA :: support for some GPU technologies

#+begin_note
This list may not represent current reality.
To get a full, up-to-date list of what packages WCT can use run =./wcb --help=.   
#+end_note

The following subsections gives some guidance for obtaining these "external" packages.

*** Manual Installation of Externals
    :PROPERTIES:
    :CUSTOM_ID: manual-externals-install
    :END:

In the DIY mode, the installer is free to provide the third-party packages in any convenient way.  Many of them are available on well supported operating systems such as Debian/Ubuntu.  Homebrew for Mac OS X is not a core developer platform but may provide many.  Redhat derived Linux distributions may find suitable package on EPEL.  Most of the required packages are fairly easy to build from source.

However the installer decides to build in DIY-mode the WCT build system should be able to be given proper installation locations via the =--with-*= flags as described above.  If it seems not to be the case, please contact the developers.

*** Singularity containers and CVMFS
    :PROPERTIES:
    :CUSTOM_ID: singularity-cvmfs-externals
    :END:

One mostly "turn key" sway to provide an environment for WCT
development and running is to use Singularity containers possibly
augmented with CVMFS.  Instructions and support can be found in the [[https://github.com/WireCell/wire-cell-singularity][wire-cell-singularity]] package.


*** Automated Installation with Spack
    :PROPERTIES:
    :CUSTOM_ID: spack-installed-externals
    :END:

[[https://github.com/LLNL/spack][Spack]] is a "meta build system" that runs the individual build systems that come with packages.  It allows one to manage an ever growing installation area which can accommodate multiple versions of a package.  It also comes with support for [[http://modules.sourceforge.net/][Environment Modules]] to handle your users' setup of these packages or can make targeted release "views" of its package tree.  

WCT provides a package [[https://github.com/WireCell/wire-cell-spack][wire-cell-spack]] which collects instructions and an Spack "repo" that builds WCT and its third-party dependencies.  This leverages Spacks built-in "repo" to provide dependencies needed by WCT's direct dependencies.  Using it will tend to build packages that one may already have installed through the OS (eg, Python).  However, this duplication should not add much to the overall build time which is automatic nor lead to any problems.

An installer that wishes to use wire-cell-spack to provide the dependencies should begin by following its [[https://github.com/WireCell/wire-cell-spack/blob/master/README.org][README]] file.

*** Externals provided by UPS
    :PROPERTIES:
    :CUSTOM_ID: using-externals-from-ups
    :END:

Fermi National Accelerator Lab (FNAL) uses a user environment system similar to [[http://modules.sourceforge.net/][Environment Modules]].  It is typical to download binaries provided by FNAL, either manually of automatically via a CVMFS mount, and then use the UPS shell function =setup= to configure a user environment with many environment variables.  For each package ("UPS product") that is so setup there is a variable that gives the installation location.  These can be used to provide suitable values for the =--with-*= flags to =wcb= as described above.  The source provides a script =waftools/wct-configure-for-ups.sh= which may help run =./wcb configure= in such an environment.


** Release management 
   :PROPERTIES:
   :CUSTOM_ID: release-management
   :END:


Releases are made by developers as needed and as described in this section.

*** Release versions
    :PROPERTIES:
    :CUSTOM_ID: release-versions
    :END:

WCT label releases are made following a fixed procedure.  Releases are labeled with  the common three-number convention: =X.Y.Z=.  These take the following semantic meanings:

- X :: a major release is made when developers believe some substantial milestone has been achieved or to being wholly new or a globally breaking development path.
- Y :: a minor or feature release is made when substantial new and in particular any breaking development is made.
- Z :: a bug release fixes problems without otherwise substantial changes.

*** Branch policy
    :PROPERTIES:
    :CUSTOM_ID: branch-policy
    :END:

Any new major or minor releases produce a new Git branch in each package.  Only bug fixes are made to this branch. Where applicable, release bug fixes should be applied to =master=.  Nominally, all development is on the =master= branch however developers are free to make their own feature branches.  They are encourage to do this if their development is expected to be disruptive to other developers.

*** Branch mechanics
    :PROPERTIES:
    :CUSTOM_ID: branch-mechanics
    :END:

To make releases, the above details are baked into two test scripts [[https://github.com/WireCell/waf-tools/blob/master/make-release.sh][make-release.sh]] and [[https://github.com/WireCell/waf-tools/blob/master/test-release.sh][test-release.sh]].  See comments at the top of each for how to run them.  These scripts can be used by others but are meant for developers to make official releases.  
