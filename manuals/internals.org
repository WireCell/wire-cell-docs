This doc describes the Wire Cell Toolkit (WCT) internal structure and support facilities.  It is intended for developers to read carefully, understand and follow.  It may be of interest to users as well.   It does not cover the "batteries included" or "reference implementations" such as the simulation, signal processing, imaging, etc which are described in section [[Packages]].

* Toolkit packages
  :PROPERTIES:
  :CUSTOM_ID: toolkit-packages
  :END:

The WCT is composed of a number of /packages/.  Each package is a sub-directory of the ~wire-cell-toolkit~. 
Packages either hold code and produce a shared library, header files and possibly executable programs.  A few "special" packages also exist:

- python :: a variety of Python modules and command-line interfaces
- cfg :: support for developing WCT configuration using Jsonnet
- tools :: support for building WCT with [[https://waf.io/][Waf]].

Other important packages not included directly in the ~wire-cell-toolkit~ include:

- data :: a set of large and generated configuration files
- bee :: a web based visualization system used with Wire-Cell and other data
- docs :: holding this manual, the news "blog" and other documentation
- singularity :: support for creating and using Singularity containers
- containers :: support for creating and using Docker containers
- spack :: support for building WCT and externals with Spack
- validate :: tests that are larger or otherwise do not fit as unit tests.

#+begin_note
Each package actually has its own git repository which is aggregated into ~wire-cell-toolkit~ via the ~git subrepo~ command.
#+end_note


** Names
   :PROPERTIES:
   :CUSTOM_ID: package-names
   :END:

Packages are broken up by their primary scope or if they hold
implementation requiring a major external software dependency.  Each
package should be named with a single, short word.  If it is held in a
separate repository, that is usually named ~wire-cell-<name>~.

If a package produces a shared library it should be named in =CamelCase=
with a prefix =WireCell=.  For example the =gen= package produces a
library =libWireCellGen.so=.  As a plugin name or an entry in the build
system, the =lib= and =.so= are dropped.  If the package has public header
files to expose to other packages they should use this same name for a
subdirectory in which to hold them.  Package layout is described move
below.

** Dependencies
   :PROPERTIES:
   :CUSTOM_ID: package-dependencies
   :END:

Some of the C++ packages are designated as /core/ packages.  These
include the packages providing the toolkit C++ structure (described
later in this document) as well as the reference implementations (eg,
=gen=, =sigproc=).  These packages have strict requirements on what
dependencies may be introduced and in particular their shared
libraries are not allowed to depend on ROOT (although their apps and
tests are, see sections [[Package structure]] and [[Build package]]).

The base package is =util= and it /must/ not depend on any other WCT
package.  The next most basic is =iface= and it /must/ not depend on any
other WCT except =util=.  Core implementation packages such as =gen= or
=sigproc= may depend on both but /must/ not depend on each other.

Third-party implementation packages may be developed outside of WCT.
They are free to mimic WCT packages and of course depend on WCT and
WCT itself shall not depend on them.  They should not make use of the
=WireCell::= C++ namespace.

** Package structure
   :PROPERTIES:
   :CUSTOM_ID: package-structure
   :END:

The WCT package layout and file extensions must follow some conventions in order to greatly simplify the build system.  In the description below, =WireCellName= is as described above.

- =src/*.cxx= ::  C++ source file for libraries with .cxx extensions or private headers
- =inc/WireCellName/*.h= :: public/API C++ header files with .h extensions
- =test/test_*.*= :: unit tests.  C++ programs named like ~test_*.cxx~
     will be built and run as will any ~test_*.{py,sh}~,
- =apps/*.cxx= :: main application(s), one appname.cxx file for each app
                  named =appname=.  Apps should be limited in number and
                  code. WCT provides a single ~wire-cell~ main
                  application as a CLI to the shared libraries.

In the root of each C++ package directory must exist a file called =wscript_build=.  It typically consist of a single line with a method call like:

#+BEGIN_SRC python :eval no
  bld.smplpkg('WireCellName', use='...')
#+END_SRC
The =bld= object is automagically available.  If the package has no dependencies then only the name is given.  Most packages will need to specify some dependencies via =use= or may specify a different list of dependencies just for any applications (using =app_use=) or for the test programs (via =test_use=).  Dependencies are transitive so one must only list those on which the package directly depends.

Fixme: make a script that generates a dot file and show the graph.

** Build package
   :PROPERTIES:
   :CUSTOM_ID: build-package
   :END:

The ~wire-cell-toolkit~ provides a monolithic view of all the core WCT
packages.  It is maintained using ~git subrepo~ and this is transparent
to users and most developers.  To actually build WCT see the section
on toolkit installation (section [[Installation]])

** Adding a new code package
   :PROPERTIES:
   :CUSTOM_ID: add-new-package-to-build
   :END:

A new core WCT code package may be initially developed outside of
~wire-cell-toolkit~ proper and added via ~git subrepo~ or it may be
created simply as a sub-directory of ~wire-cell-toolkit~.

#+BEGIN_EXAMPLE
  $ mkdir <name>
  $ echo "bld.smplpkg('WireCell<Name>', use='WireCellUtil WireCellIface')" > <name>/wscript_build
  $ emacs wscript
  $ git commit -a -m "Start code package <name>"
#+END_EXAMPLE
Replace =<name>= with your package name.  You can create and commit actual code at this time as well following the layout in [[Package structure]].
See section [[#main-wscript]] for how to modify the ~wscript~ file.


* Coding conventions
  :PROPERTIES:
  :CUSTOM_ID: coding-conventions
  :END:


** C++ code formatting 
   :PROPERTIES:
   :CUSTOM_ID: c++-code-formatting
   :END:

- Base indentation /should/ be four spaces.

- Tabs /should/ not be used for indentation.

- Opening braces /should not/ be on a line onto themselves, closing braces /should be/.

- Class names /should/ follow =CamelCase=, method and function names /should/ follow =snake_case=, class data attributes  /should/ be prefixed with =m_= (signifying "member").

- Doxygen triple-slash =///= or double-star =/** */= comments /must/ be used for in-source reference documentation.

- Normal comments /may/ be used for implementation documentation.

- Interface classes and their types and methods /must/ each have a documenting Doxygen comment.

- Header files /must/ have =#ifndef/#define/#endif= protection.

- The C++ =using namespace= keyword /must not/ be used at top file scope in a header.

- Only headers defining symbols required by a file /should/ be included.

- Any ~#include~ needed in an implementation file but not required by the corresponding header file /should not/ be in the header file.

** C++ namespaces
   :PROPERTIES:
   :CUSTOM_ID: c++-namespaces
   :END:

- All C++ code part of WCT proper and which may be accessed by other packages (eg, exported via "public headers") /must/ be under the =WireCell::= namespace.

- WCT core code (=util= and =iface= packages) /may/ exist directly under =WireCell::= but bare functions /must/ be in a sub namespace.

- Non-core, WCT implementation code (eg contents of =gen= package) /must/ use secondary namespace (eg =WireCell::Gen::=).

- Any third-party packages providing WCT-based components or otherwise depending on WCT /should not/ use the =WireCell::= namespace.


** Configuration Parameters
   :PROPERTIES:
   :CUSTOM_ID: configuration-conventions
   :END:

- Configuration parameter names should follow =snake_case=.


* Interfaces
  :PROPERTIES:
  :CUSTOM_ID: interface-internals
  :END:

A central design aspect of the WCT is that all "important" functionality which may have more than one implementation must be accessed via an /pure abstract interface class/.  All such interface classes are held in the [[https://github.com/wirecell/wire-cell-iface][iface]] package.  Interface classes should present a very limited number of purely abstract methods that express a single, cohesive concept.  Implementations typically inherent from more than one interface.  If two concepts are close but not cohesive they are best put into two interface classes.
Besides defining the method interface, Interface classes may define types.  They may also be templated.

After an implementation of an interface is instantiated and leaves local scope it should be referenced only through one of its interfaces.  It should be held through an appropriately typed =std::shared_ptr<>= of which one should be defined as =ITheInterface::pointer=.

Interfaces are used not only to access functionality but the data model for major working data is defined in terms of interfaces inheriting from =WireCell::IData=.  Once an instance is created it is immutable.

Another important category of interfaces are those which express the "node" concept.  They inherit from =WireCell::INode=.  These require implementation of an =operator()= method which is the entry to one unit of data processing.   Thus nodes make up the main unit of code through which data flow in the application.  They are somewhat equivalent to =Algorithm= concept from the Gaudi framework where the =operator()= method is equivalent to Gaudi's =execute()= method.  As nodes are also /components/ they  require some additional code instrumenting as described in the next section.   In order to participate in the data flow programming paradigm they also have some behavior requirements as described in [[./dfp.org]].  

* Components
  :PROPERTIES:
  :CUSTOM_ID: component-internals
  :END:

Components are implementations of an interface class which itself inherits from the =WireCell::IComponponent= (this interface class is in =util= as a special case due to dependency issues.  fixme: needs to be solved with a general package depending on both =iface and =util=).  This inheritance follows [[https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern][CRTP]].

Components also must have some tooling added in their implementation file.  This is in the form of a single CPP macro which generates a function used to load a factory that can create and retain instances based on a /type/ name and an /instance/ name.  For =WireCell::Gen::TrackDepos= the tooling looks like:

#+BEGIN_SRC c++ :eval no
  #include "WireCellUtil/NamedFactory.h"
  WIRECELL_FACTORY(TrackDepos, WireCell::Gen::TrackDepos, WireCell::IDepoSource, WireCell::IConfigurable);
#+END_SRC
Note, this macro needs to appear before any =using namespace= directives.  The arguments to the macro are:

1) The "type name" which is typically the class name absent any namespace prefixes.  It must be unique across the entire WCT application.
2) The full class name.
3) A list of all interfaces that it implements.

A component may be retrieved as an interface using the /named factory pattern/ implemented in WCT.  If the component has yet to be instantiated it will be through this lookup.  This is performed with code like:

#+BEGIN_SRC c++ :eval no
  #include "WireCellUtil/NamedFactory.h"
  auto a = Factory::lookup<IConfigurable>("TrackeDepos");
  // or
  auto b = Factory::lookup<IConfigurable>("TrackeDepos","some instance name");
  // or
  auto c = Factory::lookup_tn<IConfigurable>("TrackeDepos:");
  // or
  auto d = Factory::lookup_tn<IConfigurable>("TrackeDepos:some instance name");
#+END_SRC
The four example differ in if an instance name is known and if it is known separately from the type name or in the canonical join (eg as =type:name=).  The returned value in this example is a =std::shared_ptr<const IConfigurable>=.  This example accesses the =IConfigurable= interface of =TrackDepos=.  
Not typically required by most code but there exists also a function =lookup_factory()= to get the factory that constructs the component instance.


* Configuration
  :PROPERTIES:
  :CUSTOM_ID: configuration-internals
  :END:


One somewhat special component interface is =IConfigurable=.  A class inheriting from this interface is considered a /configurable component/ such as =TrackDepos= in the above example.  It is /required/ for any main application using the WCT toolkit to adhere to the Wire Cell Toolkit Configuration Protocol.  This is a contract by which the main application promises to do the following:

1) Load in user-provided configuration information (see the configuration section of hte manual)
2) Instantiate all configurables referenced in that configuration.
3) Request the default configuration object from each instance.
4) Update that object with, potentially partial, information provided by the user.
5) Give the instance the updated configuration object.
6) Do this before entering any execution phase of the application.
If the main application uses =WireCell::Toolkit= then the protocol can be enacted with code similar to 
#+BEGIN_SRC c++ :eval no
  using namespace WireCell;
  ConfigManager cfgmgr();
  // ... load up cfgmgr
  for (auto c : cfgmgr.all()) {
      string type = get<string>(c, "type");
      string name = get<string>(c, "name");
      auto cfgobj = Factory::lookup<IConfigurable>(type, name); // throws 
      Configuration cfg = cfgobj->default_configuration();
      cfg = update(cfg, c["data"]);
      cfgobj->configure(cfg);
  }
#+END_SRC
FIXME: shouldn't we put this all inside =ConfigManager=?

Developers of new configurables should keep this protocol in mind and should refer to existing configurables for various useful patterns to provide their end of the exchange.




* Execution Models
  :PROPERTIES:
  :CUSTOM_ID: execution-models
  :END:

** Ad-hoc
   :PROPERTIES:
   :CUSTOM_ID: ad-hoc-execution
   :END:


Direct calling of utility functions and concrete objects.

** Concrete
   :PROPERTIES:
   :CUSTOM_ID: execution-concrete-components
   :END:


Concrete components.

** Interface
   :PROPERTIES:
   :CUSTOM_ID: execution-via-interfaces
   :END:

Using NamedFactory.

** Data flow programming execution
   :PROPERTIES:
   :CUSTOM_ID: dfp-execution
   :END:


Using abstract DFP.  A whole section on [[Data Flow Programming]] is also available.


* Logging
  :PROPERTIES:
  :CUSTOM_ID: logging
  :END:

In WCT, "logging" means handling of text/string messages generated by WCT code and sent to some external recipient (file, console, etc).  WCT uses and includes the logging package [[https://github.com/gabime/spdlog][~spdlog~]] to provide most of the functionality and a thin wrapper described below is used to provide a simple interface and assert some policy.  The ~wire-cell~ command line and the ~Main~ app class provide logging setup functionality.

Like most logging systems, WCT relies on the concept of "log levels" and takes those defined by ~spdlog~.  The levels have labels and WCT recommends a semantic interpretation as follows, in order of expected decreasing verbosity:

- trace :: very verbose, messages generated inside a loop which runs many times per top level "event" object.  Intended for developers to understand detailed code.
- debug :: rather verbose, may be used to identify anomalous activity that is not harmful to running, any particular message should be created no more than once per top level "event" object (ie, avoid generating *debug* messages inside a loop, use *trace*).
- info :: any given message is produced no more than once per job execution and contains information that is interesting to the user even when the code runs perfectly nominal.  Components might produce *info* inside their constructor or configuration methods but should not produce *info* each time they executed.
- warn :: a rare occurrence that indicates some potential problem with input data or configuration but which is sufficiently minor that the code can proceed in an expected or nominal state.
- error :: emitted just prior to some code returning to caller with some error indicator (that isn't necessarily an exception). 
- critical :: should precede the throwing of an a exception to provide more information than may be conveniently packed into the exception object.  

The other two concepts from ~spdlog~ that must be understood by user and developer alike are /loggers/ and /sinks/.  As described in the section below, code sends messages into the WCT logging system via a logger object.  The logging system connects these loggers to zero or more sinks for final dispatching of the log messages.  WCT encourages all loggers to be connected to all sinks although a more complex topology is allowed. 

A log level is associated individually with each log message, each logger and each sink.  The logger and sink levels are compared to the message level to determine if the message shall pass.  For example, a log message at *info* may be accepted by a logger at *debug* but then fail to be emitted to a sink at *warn*.  The levels of loggers and sinks may be set at run time and some compile-time setting is also supported (see below).


** Logging Command Line Interface
   :PROPERTIES:
   :CUSTOM_ID: logging-cli
   :END:

WCT ~wire-cell~ command line interface and the ~Main~ app it uses has support for adding sinks, optionally with levels (default is "trace"), setting the default level of all loggers and setting the level of specific loggers by name.  The ~--help~ output gives a summary of what functionality the CLI provides.  The ~Main~ app class can do similar and developers may see its header file.

#+BEGIN_EXAMPLE
[sl7kc]bviren@hierocles:wct> wire-cell --help
...
  -l [ --logsink ] arg  log sink, filename or 'stdout' or 'stderr', if added 
                        ':level' then set a log level for the sink
  -L [ --loglevel ] arg set lowest log level for a log in form 'name:level' or 
                        just 'level' for all (level one of 
                        error,warn,info,debug,trace)
#+END_EXAMPLE

The following example:

#+BEGIN_EXAMPLE
  $ wire-cell -L trace -L pgraph:info -l stdout:info -l verbose.log:trace -c ....
#+END_EXAMPLE
will cause:

- the default logger level to be set down to *trace* from the default *debug*
- the ~pgraph~ logger will be raised to *info* to make it more quiet
- everything at *info* and above will be printed to stdout
- everything at *trace* and above will be printed to the file ~verbose.log~

In this example:
#+BEGIN_EXAMPLE
  $ wire-cell -c ....
#+END_EXAMPLE

The only thing that should print to the console are messages from wrongly programmed library code which is violating the "no ~iostream~" rule.  




** Logging Code Interface
   :PROPERTIES:
   :CUSTOM_ID: logging-code
   :END:

The use of "bare" C++ ~std::cout~ or ~std::cerr~ is strongly discouraged in all WCT library code although they may be used in unit tests where convenient.  Instead, WCT library code should use either an explicit logger object or the default logger.  

There is some overhead in getting a logger so one should not be created deep in some loop.  Instead, a component class should hold a logger as a class data member and initialize it in its constructor.  For example:

#+BEGIN_SRC c++
class MyComponent : public ISomething {
    Log::logptr_t log;
public: // ...
};
#+END_SRC
Then in the constructor you would initialize something like:

#+BEGIN_SRC c++
MyComponent::MyComponent(...) 
    : log(Log::logger("myname"))
{
    // the constructor body
    log->debug("I created a MyComponent at {:p}", (void*)this);
}
#+END_SRC

The ~"myname"~ is the name of the logger and allows the logger to be shared by other objects.  It is through this name that the user may control logger log levels.  For now, the convention is to chose a short name that represents the package providing the code or the codes major functionality.  Here are some names currently used:

- wct :: the base or default logger
- glue :: any pgraph node which doesn't do much but provide network topology patterns (split, join, fanout/fanin, etc).
- io :: provides some file input/output node
- sim :: provides a simulation component (ie, from the misnamed ~wire-cell-gen~ package)
- geom :: provides some detector geometry related component
- sys :: core WCT system code/components (main, plugins, etc)
New names are allowed but proliferation should be avoided.  Please add any new ones to this list.

Each logger provides a method with the same name as a level that code may call to produce a message at that level.  These logger level methods take a string and variadic arguments.  The string may include formatting codes used by ~fmt~ (provided by ~spdlog~).  See [[http://fmtlib.net/latest/syntax.html][fmt syntax page]] for details.

#+BEGIN_SRC c++
log->trace("MyComponent: deep inside some loop with x={} and ptr={:p}", x, ptr);
log->debug("MyComponent: a once per event call with frame {}", frame->ident());
log->info("loading very important data config file {}", filename);
log->warn("you asked to drift {} depos way outside the detector, hope you know what you are doing", ndropped);

log->error("Called pass EOS {} times", ++neos);
return neos > 1;

THROW(ValueError() << errmsg{"divide by zero error"});
log->critical("This is fine.  *watches fire*");
#+END_SRC

By definition the *debug* and *trace* level messages may be prodigiously produced.  Even if these levels are turned off (see blow) their calls are still made.  To avoid wasting CPU on useless operations deep inside some loop these calls maybe compiled away if wrapped in CPP macros.  Consider using them for at least *trace*.  Eg:

#+BEGIN_SRC c++
void MyComponent::method() {
    for (...) {
        SPDLOG_LOGGER_TRACE(log, "This message may not even be compiled in");
    }
}
#+END_SRC
Of course, never place code with side effects inside such CPP macros.

The final code usage pattern is that of the default logger.  No explicit logger object is needed which means all messages sent to it can not be disentangled when setting various levels.  If one code sprays very verbose messages at *info* level there is no way to filter them out that will not also remove less verbose ones.  Thus, this logger should be used sparingly and only in code where creating a named logger is somehow prohibitive.  If used, extra care should be taken not to violate the suggested semantic meaning to the levels which was given above.  With those caveats given, to use the default loggers call functions provided directly by ~spdlog~:

#+BEGIN_SRC c++
using spdlog::debug;
// ...
void myfunc() {
    debug("my func is called");
    for (const auto& obj : giantarray) {
        spdlog::trace("super noisy message with obj {}", obj);
    }
}
#+END_SRC
 


** Logging Integration
   :PROPERTIES:
   :CUSTOM_ID: logging-int
   :END:


WCT, being a toolkit, is meant to be integrated into a larger application or framework.  These code bases often provide their own logging system.  The choice of including ~spdlog~ to provide the WCT logging system was in part made to provide a mechanism by which it could also be integrated into whatever logging system the "host" code base may provide.  

If the "host" also uses ~spdlog~ then integration is trivial.  If it uses some other logging system then integration can be done by developing an ~spdlog~ /sink/ which forwards message to the host's equivalent of a logger.  See the ~spdlog~ wiki entry on [[https://github.com/gabime/spdlog/wiki/4.-Sinks#implementing-your-own-sink][implementing custom sinks]] for instructions.

Another solution to integrate WCT logging with that of the "host" code base is to simply do nothing.  The ~spdlog~ console output will naturally multiplex with any that the host may produce.  However, users likely must take care to not use the same file to sink both logging systems.
