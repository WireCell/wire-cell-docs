# -*- python -*-

### Guidance on using this wscript

## 1) make a local web area and get a copy of the web site
# cd ~/public_html
# git clone git@github.com:WireCell/wirecell.github.io

## 2) Come back here
# cd /path/to/work
# git clone git@github.com:WireCell/wire-cell-docs
# cd wire-cell-docs/manuals

## 3) Configure to install into local web site
# ./waf configure --prefix=~/public_html/wirecell.github.io
# ./waf -j1 build install

## 4) Check results are good, commit and push
# cd ~/public_html
# git commit -am "..."
# git push

### note, you probably MUST run waf in serial mode (-j1) as multiple
### emacsen may fight over locking the package installation directory.


import os
import shutil

def org2x(what, main="manual"):

    # org-publish's cache is apparently broken for arbitrary include depths!
    # Sneak in this work-around.  Waf handles the dependencies anyways.  More
    # info at:
    # http://lists.gnu.org/archive/html//emacs-orgmode/2015-11/msg00620.html
    broken = os.path.expanduser("~/.org-timestamps/wct-%s-%s.cache" % (main, what))
    if os.path.exists(broken):
        os.unlink(broken)

    return """${EMACS} --quick --batch -l ${SRC[1].abspath()} --eval '(org-publish-project "wct-%s-%s")'""" % (main, what)

def epubify(task):

    bldnode = task.outputs[0].parent
    figsdir = os.path.join(bldnode.abspath(), 'figs')

    # gotta do a hack to bring the figs into file system scope
    if not os.path.exists(figsdir):
        os.makedirs(figsdir)
    svgs = [i.abspath() for i in task.inputs[2:] if i.abspath().endswith('.svg')]
    for svg in svgs:
        shutil.copy(svg, figsdir)

    cmd = "pandoc -o %s --toc-depth=2 -N %s %s" % (task.outputs[0].abspath(),
                                                       task.inputs[0].abspath(),
                                                       task.inputs[1].abspath())
    return task.exec_command(cmd) 


def configure(cfg):
    cfg.find_program('emacs', var='EMACS')


def build(bld):
    manual_org = bld.path.ant_glob("manual.org")
    index_org = bld.path.ant_glob("index.org")
    publish_el = bld.path.ant_glob("publish.el")
    rest_org = [p for p in bld.path.ant_glob("*.org") if p not in manual_org+index_org]

    styledir = bld.path.find_dir("styles")
    figsdir = bld.path.find_dir("figs")
    figsrc = figsdir.ant_glob('**/*.svg')

    for ext in ["html", "md"]:            # also pdf
        srcs = manual_org + publish_el + rest_org
        bld(source=srcs, target="manual.{ext}".format(ext=ext),
            rule=org2x(ext), install_path='${PREFIX}')

    # stand-alone index
    bld(source=index_org+publish_el, target="index.html",
        rule=org2x("html", "index"), install_path='${PREFIX}')

    # EPUB
    epubsrc = [ bld.path.find_or_declare("manual.md"),
                bld.path.find_resource("epub-title.txt")]
    epubsrc += figsrc
    bld(source=epubsrc, target="manual.epub",
            rule=epubify,
            install_path='${PREFIX}')


    # style directory
    bld.install_files('${PREFIX}/styles', styledir.ant_glob('**'),
                      cwd=styledir, relative_trick=True)
    # figs directory
    bld.install_files('${PREFIX}/figs', figsrc,
                      cwd=figsdir, relative_trick=True)
    
